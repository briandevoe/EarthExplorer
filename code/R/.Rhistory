# Load required packages
library(terra)
library(ggplot2)
library(ggspatial)
library(stringr)
# Define folder containing exported GeoTIFFs
folder_path <- "C:\Users\bdevoe\Desktop\Remote Sensing\data and scripts\ndvi\sentinel\NDVI_S2_MA_2021"
# Load required packages
library(terra)
library(ggplot2)
library(ggspatial)
library(stringr)
# Define folder containing exported GeoTIFFs
folder_path <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021"
# List all GeoTIFF files
file_list <- list.files(folder_path, pattern = "//.tif$", full.names = TRUE)
# Extract state and year from filenames
extract_metadata <- function(file_path) {
fname <- basename(file_path)
matches <- str_match(fname, "aod_raster_([a-z_]+)_(//d{4})//.tif")
list(state = str_to_title(gsub("_", " ", matches[2])), year = as.integer(matches[3]))
}
metadata <- lapply(file_list, extract_metadata)
# Loop through each file and plot
for (i in seq_along(file_list)) {
file <- file_list[i]
state <- metadata[[i]]$state
year <- metadata[[i]]$year
# Load raster
r <- rast(file)
# Convert raster to data frame for ggplot
r_df <- as.data.frame(r, xy = TRUE, na.rm = TRUE)
colnames(r_df)[3] <- "AOD"
# Plot
p <- ggplot(r_df, aes(x = x, y = y, fill = AOD)) +
geom_raster() +
scale_fill_viridis_c(option = "C", na.value = "transparent") +
coord_equal() +
labs(title = paste("Annual Average AOD -", state, year),
fill = "AOD",
x = NULL,
y = NULL) +
theme_minimal()
print(p)
# Optionally save the plot
# ggsave(sprintf("C:/Users/bdevoe/Desktop/aod_exports2/plots/aod_%s_%d.png", tolower(gsub(' ', '_', state)), year), plot = p, width = 6, height = 5)
}
# Load required packages
library(terra)
library(ggplot2)
library(ggspatial)
library(stringr)
# Define folder containing exported GeoTIFFs
folder_path <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021"
# List all GeoTIFF files
file_list <- list.files(folder_path, pattern = "//.tif$", full.names = TRUE)
# Load required packages
library(terra)
library(ggplot2)
library(ggspatial)
library(stringr)
# Define folder containing exported GeoTIFFs
folder_path <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021/"
# List all GeoTIFF files
file_list <- list.files(folder_path, pattern = "//.tif$", full.names = TRUE)
library(terra)
library(ggplot2)
library(viridis)
# ---------------------------------------------------------------
# Set the data and output directories
# ---------------------------------------------------------------
data_dir <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021"
plot_dir <- file.path(data_dir, "plots")
# Create the 'plots' folder if it doesn't exist
if (!dir.exists(plot_dir)) {
dir.create(plot_dir)
cat(paste0("📁 Created output folder: ", plot_dir, "/n"))
}
# List all .tif files in the folder
tif_files <- list.files(data_dir, full.names = TRUE)
library(terra)
library(ggplot2)
library(viridis)
# ---------------------------------------------------------------
# Set the data and output directories
# ---------------------------------------------------------------
data_dir <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021"
plot_dir <- file.path(data_dir, "plots")
# Create the 'plots' folder if it doesn't exist
if (!dir.exists(plot_dir)) {
dir.create(plot_dir)
cat(paste0("📁 Created output folder: ", plot_dir, "/n"))
}
# List all .tif files in the folder
tif_files <- list.files(data_dir, full.names = TRUE)
# ---------------------------------------------------------------
# Loop through and plot each tile
# ---------------------------------------------------------------
for (i in seq_along(tif_files)) {
cat(paste0("📂 Processing file ", i, ": ", tif_files[i], "/n"))
# Load raster (skip if error)
r <- try(rast(tif_files[i]), silent = TRUE)
if (inherits(r, "try-error")) {
cat("⚠️ Skipping invalid file./n")
next
}
# Downsample
r_small <- aggregate(r, fact = 32, fun = mean, na.rm = TRUE)
r_small[r_small < -1 | r_small > 1] <- NA  # Filter out invalid NDVI
# Convert to data.frame
r_df <- as.data.frame(r_small, xy = TRUE, na.rm = TRUE)
names(r_df)[3] <- "NDVI"
# Plot
p <- ggplot(r_df, aes(x = x, y = y, fill = NDVI)) +
geom_raster() +
scale_fill_viridis(name = "NDVI", na.value = "transparent", limits = c(0, 1)) +
coord_equal() +
labs(title = paste0("NDVI - ", basename(tif_files[i])),
x = "Longitude", y = "Latitude") +
theme_minimal()
# -----------------------------------------------------------
# Save plot to 'plots/' subdirectory
# -----------------------------------------------------------
base_name <- tools::file_path_sans_ext(basename(tif_files[i]))
out_path <- file.path(plot_dir, paste0(base_name, "_plot.png"))
ggsave(filename = out_path, plot = p, width = 6, height = 5, dpi = 300)
cat(paste0("✅ Saved plot to: ", out_path, "/n/n"))
# Memory cleanup
rm(r, r_small, r_df, p)
gc()
}
# library(terra)
#
# # Define the path to a single .tif file
# # file_path <- "C:/Users/bdevoe/Desktop/ndvi/ndvi_2021_us-0000000000-0000000000-010.tif"  # update this
# file_path <- "C:/Users/bdevoe/Desktop/ndvi/ndvi_2021_us-0000032768-0000032768-006.tif"
#
# # Step 1: Load raster tile
# ndvi_tile <- rast(file_path)
#
# # Print summary info
# print(ndvi_tile)
# summary(values(ndvi_tile))
library(terra)
library(ggplot2)
library(viridis)
# ---------------------------------------------------------------
# Set the data and output directories
# ---------------------------------------------------------------
data_dir <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021"
plot_dir <- file.path(data_dir, "plots")
# Create the 'plots' folder if it doesn't exist
if (!dir.exists(plot_dir)) {
dir.create(plot_dir)
cat(paste0("📁 Created output folder: ", plot_dir, "/n"))
}
# List all .tif files in the folder
tif_files <- list.files(data_dir, full.names = TRUE)
# ---------------------------------------------------------------
# Loop through and plot each tile
# ---------------------------------------------------------------
for (i in seq_along(tif_files)) {
cat(paste0("📂 Processing file ", i, ": ", tif_files[i], "/n"))
# Load raster (skip if error)
r <- try(rast(tif_files[i]), silent = TRUE)
if (inherits(r, "try-error")) {
cat("⚠️ Skipping invalid file./n")
next
}
# Downsample
r_small <- r  # No downsampling
# r_small <- aggregate(r, fact = 32, fun = mean, na.rm = TRUE)
# r_small[r_small < -1 | r_small > 1] <- NA  # Filter out invalid NDVI
# Convert to data.frame
r_df <- as.data.frame(r_small, xy = TRUE, na.rm = TRUE)
names(r_df)[3] <- "NDVI"
# Plot
p <- ggplot(r_df, aes(x = x, y = y, fill = NDVI)) +
geom_raster() +
scale_fill_viridis(name = "NDVI", na.value = "transparent", limits = c(0, 1)) +
coord_equal() +
labs(title = paste0("NDVI - ", basename(tif_files[i])),
x = "Longitude", y = "Latitude") +
theme_minimal()
# -----------------------------------------------------------
# Save plot to 'plots/' subdirectory
# -----------------------------------------------------------
base_name <- tools::file_path_sans_ext(basename(tif_files[i]))
out_path <- file.path(plot_dir, paste0(base_name, "_plot.png"))
ggsave(filename = out_path, plot = p, width = 6, height = 5, dpi = 300)
cat(paste0("✅ Saved plot to: ", out_path, "/n/n"))
# Memory cleanup
rm(r, r_small, r_df, p)
gc()
}
library(terra)
library(ggplot2)
library(viridis)
# ---------------------------------------------------------------
# Set the data and output directories
# ---------------------------------------------------------------
data_dir <- "C:/Users/bdevoe/Desktop/Remote Sensing/data and scripts/ndvi/sentinel/NDVI_S2_MA_2021"
plot_dir <- file.path(data_dir, "plots")
# Create the 'plots' folder if it doesn't exist
if (!dir.exists(plot_dir)) {
dir.create(plot_dir)
cat(paste0("📁 Created output folder: ", plot_dir, "/n"))
}
# List all .tif files in the folder
tif_files <- list.files(data_dir, full.names = TRUE)
# ---------------------------------------------------------------
# Loop through and plot each tile
# ---------------------------------------------------------------
for (i in seq_along(tif_files)) {
cat(paste0("📂 Processing file ", i, ": ", tif_files[i], "/n"))
# Load raster (skip if error)
r <- try(rast(tif_files[i]), silent = TRUE)
if (inherits(r, "try-error")) {
cat("⚠️ Skipping invalid file./n")
next
}
# Downsample
# r_small <- r  # No downsampling
r_small <- aggregate(r, fact = 4, fun = mean, na.rm = TRUE)  # 10m → 40m resolution
# r_small <- aggregate(r, fact = 32, fun = mean, na.rm = TRUE)
# r_small[r_small < -1 | r_small > 1] <- NA  # Filter out invalid NDVI
# Convert to data.frame
r_df <- as.data.frame(r_small, xy = TRUE, na.rm = TRUE)
names(r_df)[3] <- "NDVI"
# Plot
p <- ggplot(r_df, aes(x = x, y = y, fill = NDVI)) +
geom_raster() +
scale_fill_viridis(name = "NDVI", na.value = "transparent", limits = c(0, 1)) +
coord_equal() +
labs(title = paste0("NDVI - ", basename(tif_files[i])),
x = "Longitude", y = "Latitude") +
theme_minimal()
# -----------------------------------------------------------
# Save plot to 'plots/' subdirectory
# -----------------------------------------------------------
base_name <- tools::file_path_sans_ext(basename(tif_files[i]))
out_path <- file.path(plot_dir, paste0(base_name, "_plot.png"))
ggsave(filename = out_path, plot = p, width = 6, height = 5, dpi = 300)
cat(paste0("✅ Saved plot to: ", out_path, "/n/n"))
# Memory cleanup
rm(r, r_small, r_df, p)
gc()
}
